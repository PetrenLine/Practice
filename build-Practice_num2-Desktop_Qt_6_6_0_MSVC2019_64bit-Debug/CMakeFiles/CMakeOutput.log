The system is: Windows - 10.0.19045 - AMD64
Compiling the CXX compiler identification source file "CMakeCXXCompilerId.cpp" succeeded.
Compiler: E:/visual studio/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe 
Build flags: -DQT_QML_DEBUG
Id flags:  

The output was:
0
Microsoft (R) C/C++ Optimizing Compiler Version 19.29.30133 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

CMakeCXXCompilerId.cpp
Microsoft (R) Incremental Linker Version 14.29.30133.0
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:CMakeCXXCompilerId.exe 
CMakeCXXCompilerId.obj 


Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.exe"

Compilation of the CXX compiler identification source "CMakeCXXCompilerId.cpp" produced "CMakeCXXCompilerId.obj"

The CXX compiler identification is MSVC, found in "E:/Practice/Practice/build-Practice_num2-Desktop_Qt_6_6_0_MSVC2019_64bit-Debug/CMakeFiles/3.24.2/CompilerIdCXX/CMakeCXXCompilerId.exe"

Detecting CXX compiler ABI info compiled with the following output:
Change Dir: E:/Practice/Practice/build-Practice_num2-Desktop_Qt_6_6_0_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):E:/visual studio/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_e9e79 && [1/2] Building CXX object CMakeFiles\cmTC_e9e79.dir\CMakeCXXCompilerABI.cpp.obj
[2/2] Linking CXX executable cmTC_e9e79.exe



Performing C++ SOURCE FILE Test HAVE_STDATOMIC succeeded with the following output:
Change Dir: E:/Practice/Practice/build-Practice_num2-Desktop_Qt_6_6_0_MSVC2019_64bit-Debug/CMakeFiles/CMakeTmp

Run Build Command(s):E:/visual studio/Common7/IDE/CommonExtensions/Microsoft/CMake/Ninja/ninja.exe cmTC_db7cf && [1/2] Building CXX object CMakeFiles\cmTC_db7cf.dir\src.cxx.obj
[2/2] Linking CXX executable cmTC_db7cf.exe


Source file was:
#include <atomic>
#include <cstdint>

int main(int, char **)
{
    volatile std::atomic<char>    size_1;
    volatile std::atomic<short>   size_2;
    volatile std::atomic<int>     size_4;
    volatile std::atomic<int64_t> size_8;

    ++size_1;
    ++size_2;
    ++size_4;
    ++size_8;

    (void)size_1.load(std::memory_order_relaxed);
    (void)size_2.load(std::memory_order_relaxed);
    (void)size_4.load(std::memory_order_relaxed);
    (void)size_8.load(std::memory_order_relaxed);

    return 0;
}
